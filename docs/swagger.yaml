basePath: /
definitions:
  models.CreateUserRequest:
    properties:
      age:
        maximum: 100
        minimum: 0
        type: integer
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
  models.Credentials:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.OrderRequest:
    properties:
      price:
        type: number
      product:
        type: string
      quantity:
        type: integer
    required:
    - price
    - product
    - quantity
    type: object
  models.OrderResponse:
    properties:
      created_at:
        type: string
      id:
        type: integer
      price:
        type: number
      product:
        type: string
      quantity:
        type: integer
      user_id:
        type: integer
    type: object
  models.UpdateUserRequest:
    properties:
      age:
        maximum: 150
        minimum: 0
        type: integer
      email:
        type: string
      name:
        type: string
    required:
    - age
    - email
    - name
    type: object
  models.User:
    properties:
      age:
        maximum: 150
        minimum: 0
        type: integer
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
    required:
    - age
    - email
    - name
    - password
    type: object
host: localhost:8080
info:
  contact:
    email: support@kvanttz.ru
    name: API Support
  description: API для управления пользователями и заказами
  title: KvantTZ API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Выполняет вход пользователя и возвращает JWT-токен
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - application/json
      responses:
        "200":
          description: '{"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...}'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: '{"error": "Email и пароль обязательны"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: '{"error": "Неверные учетные данные"}'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Аутентификация пользователя
      tags:
      - auth
  /users:
    get:
      description: Возвращает список пользователей с пагинацией и фильтрацией по возрасту
      parameters:
      - description: Номер страницы (по умолчанию 1)
        in: query
        name: page
        type: integer
      - description: Лимит элементов на странице (по умолчанию 10)
        in: query
        name: limit
        type: integer
      - description: Минимальный возраст
        in: query
        name: min_age
        type: integer
      - description: Максимальный возраст
        in: query
        name: max_age
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: '{"users": [], "total": 0, "page": 0, "limit": 0}'
          schema:
            additionalProperties: true
            type: object
        "500":
          description: '{"error": "service error"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить список пользователей
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Создает нового пользователя
      parameters:
      - description: Данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses: {}
      summary: Создать пользователя
      tags:
      - users
  /users/{id}:
    delete:
      description: Удаляет пользователя по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
        "400":
          description: '{"error": "invalid user ID"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error": "user not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: '{"error": "internal error message"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Удалить пользователя
      tags:
      - users
    get:
      description: Возвращает данные пользователя по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: '{"error": "invalid user ID"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error": "user not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить пользователя по ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Обновляет данные пользователя по указанному ID
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные пользователя
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: '{"error": "invalid user ID"}'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: '{"error": "user not found"}'
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Обновить данные пользователя
      tags:
      - users
  /users/{id}/orders:
    get:
      description: Возвращает список всех заказов указанного пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.OrderResponse'
            type: array
        "400":
          description: Неверный ID пользователя
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Получить заказы пользователя
      tags:
      - orders
    post:
      consumes:
      - application/json
      description: Создает новый заказ для указанного пользователя
      parameters:
      - description: ID пользователя
        in: path
        name: id
        required: true
        type: integer
      - description: Данные заказа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.OrderRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.OrderResponse'
        "400":
          description: Неверный ID пользователя или данные заказа
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Пользователь не найден
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - ApiKeyAuth: []
      summary: Создать заказ
      tags:
      - orders
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
